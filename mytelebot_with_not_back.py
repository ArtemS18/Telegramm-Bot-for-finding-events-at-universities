import telebot
import mydate_sql0
import date_sql
import stats_data
import time
import token_telebot
import logging
import emoji
import threading

from datetime import date as date_for
import datetime as dt_mg
from datetime import datetime
from telebot import types
from urllib.request import urlopen
from mytoken import *

date_in_sql = {}
comment = {}
f = False
all_users = {} #–°–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

def tbot():
    '''–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º'''
    global date_in_sql, comment, all_users
    bot = telebot.TeleBot(token_telebot.token) #–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å—Å–∞ TeleBot

    '''–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    ev = types.KeyboardButton("üì™–ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    sett = types.KeyboardButton("üìï–ú–µ–Ω—é")
    #stats = types.KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    menu.add(sett,ev)
    #menu.add(stats)

    menu_adm = types.ReplyKeyboardMarkup(resize_keyboard=True)
    ev = types.KeyboardButton("–ó–∞–ø–∏—Å–∏")
    sett = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")
    st = types.KeyboardButton("–ó–∞—Ä–µ–≥. –≤ –±–æ—Ç–µ")
    menu_adm.add(sett, ev, st)

    def cheak():
        '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –µ—ë —Å –¥–∞—Ç–∞–º–∏ –∏–∑ sql-—Ç–∞–±–ª–∏—Ü—ã'''
        global date_in_sql
        arr = date_sql.sql_manager().cheak()
        date_in_sql = {}
        if arr !=[]:
            today = date_for.today()
            hour = datetime.now().hour
            today = today + dt_mg.timedelta(days=1)

            back = today + dt_mg.timedelta(days=-1)
            #tomorrow_1 = today + datetime.timedelta(days=2)
            #tomorrow_2 = today + datetime.timedelta(days=3)
            #print(tomorrow)
            for i in arr:
                if i[0] not in date_in_sql:
                    date_time_obj = datetime.strptime(i[1], '%Y-%m-%d %H:%M')
                    if date_time_obj.date() < today:
                        date_sql.sql_manager().delete_once(i[2])
                        cheak()
                    if str(date_time_obj.date()) == str(today) and str(date_time_obj.hour) == str(hour):
                        if i[3] == 0:
                            date_in_sql[i[0]] = [i[1], 0]
                        else:
                            date_in_sql[i[0]] = [i[1], 1]
                    #elif i[1] == str(tomorrow):
                        #date_in_sql[i[0]] = [i[1], 1]
                    #elif (i[1] == str(tomorrow_1):
                        #date_in_sql[i[0]] = [i[1], 2]
                    #else:
                        #date_in_sql[i[0]] = [i[1], 3]
        #print(date_in_sql)

    def cheak_eventer():
        '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π'''
        global date_in_sql
        #print(1123, date_in_sql)
        while True:
            #print(11)
            if date_in_sql != {}:
                for users in date_in_sql:
                    arr = date_sql.sql_manager().cheak_event(users, date_in_sql[users][0])
                    #print(arr)
                    for i in arr:
                        arr = ["C–ï–ì–û–î–ù–Ø —á–µ—Ä–µ–∑ –ß–ê–°", "–ó–ê–í–¢–†–ê"]
                        events = types.InlineKeyboardMarkup()
                        button1 = types.InlineKeyboardButton(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", url=f'{i[3]}')
                        events.add(button1, types.InlineKeyboardButton(text="üîï–ë–æ–ª—å—à–µ –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å", callback_data=f"{users}_datestop=dell_{i[5]}"))
                        events.add(types.InlineKeyboardButton(text="–°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"{users}_dellmess"))
                        bot.send_message(int(i[0]), f"üì¢–ù–µ –∑–∞–±—É–¥—å *{arr[date_in_sql[users][1]]}* ({i[4]}) –ø–æ—Å–µ—Ç–∏—Ç—å *{i[2]}*.", reply_markup=events, parse_mode= "Markdown")
                        #bot.register_next_step_handler(message,dd)
                        #bot.delete_message(call.message.chat.id, call.message.message_id)
                        date_sql.sql_manager().delete_once(i[5])
                        #return None
            cheak()
            time.sleep(60)

    def add_new_user(user):
        '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –°–æ–∑–¥–∞–µ—Ç –≤ all_users —Å–ª–æ–≤–∞—Ä—å —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
        global all_users
        all_users[user] ={
            'f' : 0,
            'page' : -1,
            'date' : [],
            'last_photo': 0,
            'mou_date' : "",
            'page_date' : 9,
            'fun' : ["", ""],
            'arr' : [],
            'tp' : 0,
            'xz':0,
            'less' : [],
            'date_in_sql' : {},
            'page_for_less' : 5,
        }
        cheak()

    c = threading.Thread(target = cheak_eventer, args = ())
    c.start()

    @bot.message_handler(commands=['start'])#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start
    def start(message):
        '''–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é add_new_user –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º'''
        global date_in_sql
        user  = message.from_user.id
        add_new_user(str(user))
        bot.send_message(message.from_user.id, emoji.emojize(":thumbs_up: –ü—Ä–∏–≤–µ—Ç, {0.first_name}! \n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üìï–ú–µ–Ω—é. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞–∂–º–∏ –Ω–∞ üì™–ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è").format(message.from_user), reply_markup=menu)
        #if str(user) in date_in_sql:
        #c = threading.Thread(target = cheak_eventer, args = ())
        #c.start()

    @bot.message_handler(commands=['adm'])
    def start(message):
        user  = str(message.from_user.id)
        if user in admins:
            bot.send_message(message.from_user.id, emoji.emojize(":ledger: –í—ã –≤–æ—à–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"), reply_markup=menu_adm)

    @bot.message_handler(func=lambda message: message.text =="–ó–∞–ø–∏—Å–∏")
    def adm_stats(message):
        o = date_sql.sql_manager()
        all_event = o.cheak()
        if all_event != []:
            #print(all_event)
            for g in all_event:
                bot.send_message(message.from_user.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {g[0]} \n–î–∞—Ç–∞: {g[1]}\n –¢–∏–ø—ã: {g[2]} - {g[3]}')
        else:
            bot.send_message(message.from_user.id, '–ü—É—Å—Ç–æ')
    @bot.message_handler(func=lambda message: message.text =="–ó–∞—Ä–µ–≥. –≤ –±–æ—Ç–µ")
    def adm_stats(message):
        global all_users

        if all_users != {}:
            #print(all_users)
            for g in all_users:
                bot.send_message(message.from_user.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {g}')
        else:
            bot.send_message(message.from_user.id, '–ü—É—Å—Ç–æ')

    '''@bot.message_handler(func=lambda message: str(message.from_user.id) in date_in_sql)
    def cheak_eventer(message):
        global date_in_sql
        #print(1123, date_in_sql)
        if date_in_sql != {}:
            for users in date_in_sql:
                arr = date_sql.sql_manager().cheak_event(users, date_in_sql[users])
                for i in arr:
                    events = types.InlineKeyboardMarkup()
                    button1 = types.InlineKeyboardButton(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", url=f'{i[3]}')
                    events.add(button1, types.InlineKeyboardButton(text="üîï–°–∫—Ä—ã—Ç—å –∏ –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å", callback_data=f"{users}_datestop=dell_{i[5]}"))
                    bot.send_message(int(i[0]), f"üì¢–ù–µ –∑–∞–±—É–¥—å *{i[4]}* –ø–æ—Å–µ—Ç–∏—Ç—å *{i[2]}*.", reply_markup=events, parse_mode= "Markdown")
                    #bot.register_next_step_handler(message,dd)
                    #bot.delete_message(call.message.chat.id, call.message.message_id)
                    date_sql.sql_manager().delete(i[5])
                    cheak()
                    return None'''


    @bot.message_handler(func=lambda message: message.text =="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")
    def adm_user(message):
        pass

    @bot.message_handler(func=lambda message: message.text =="üì™–ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    def dd(message):
        '''–û–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ data_sql –ø–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö'''
        global date_in_sql
        arr = date_sql.sql_manager().cheak_user(str(message.from_user.id))
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        if arr != []:
            #bot.send_message(message.from_user.id, "–¢–≤–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
            for i in arr:
                events = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", url=f'{i[3]}', callback_data=f'{message.from_user.id}_newevent')
                bn = types.InlineKeyboardButton("‚úÖ–ü–æ—Å–µ—Ç–∏–ª", callback_data=f'{message.from_user.id}_newevent')
                events.add(button1, types.InlineKeyboardButton(text="üóëÔ∏è–£–¥–∞–ª–∏—Ç—å", callback_data=f"{message.from_user.id}_datestop=dell_{i[5]}"))
                #events.add(button1)
                events.add(types.InlineKeyboardButton(text="–°–∫—Ä—ã—Ç—å", callback_data=f"{message.from_user.id}_dellmess"))
                bot.send_message(message.from_user.id, f"*–ù–∞–∑–≤–∞–Ω–∏–µ:*\n{i[2]}\n*–î–∞—Ç–∞:*\n{i[4]}\n", reply_markup=events, parse_mode= "Markdown")
        else:
            bot.send_message(message.from_user.id, "‚ùå–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")

    @bot.message_handler(func=lambda message: message.text =="üìï–ú–µ–Ω—é")# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ú–µ–Ω—é
    def text(message):
        '''–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π'''
        global all_users
        user = message.from_user.id

        if str(user) not in all_users:
            add_new_user(str(user))

        st = types.InlineKeyboardMarkup()
        st.add(types.InlineKeyboardButton(text="üìã–§–æ—Ä–º–∞—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data=f"{user}_settings_1"))
        st.add(types.InlineKeyboardButton(text="üìÜ–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è", callback_data=f"{user}_settings_2"))
        st.add(types.InlineKeyboardButton(text="üéì–í—ã–±—Ä–æ—Ä –í–£–ó–∞", callback_data=f"{user}_settings_3"))

        if all_users[str(user)]['tp'] != 0:
            st.add(types.InlineKeyboardButton(text="‚úÖ–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data=f"{user}_startsarch"))
        bot.send_message(message.from_user.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏: ", reply_markup=st)
    @bot.message_handler(commands=['stats'])# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ú–µ–Ω—é
    def stats(message):
        user = str(message.from_user.id)
        obj = stats_data.sql_manager()
        arr = obj.cheak_stats(user)
        mess1 = f'–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ *{arr[0]}* –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π '
        mess2 = f'–∏ –ø–æ—Å–µ—Ç–∏–ª *{arr[1]}* –∏–∑ –Ω–∏—Ö.'
        if arr[0] == 0:
            mess1 = '–¢—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è '
        if arr[1] == 0:
            mess2 = f'–∏ –Ω–µ –ø–æ—Å–µ—Ç–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∏—Ö.'
        mess = mess1+mess2
        bot.send_message(message.from_user.id, mess, parse_mode="Markdown")

    ''' CALLBACKER FOR ALL DATE_CALL'''
    @bot.callback_query_handler(func=lambda call:True)# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∞ –∫–Ω–æ–ø–æ–∫ —Ç–∏–ø–∞ InlineKeyboardMarkup
    def callback_query(call):
        global all_users, comment
        user = call.data.split('_')[0]
        if user not in all_users:
            add_new_user(user)
        req = call.data.split('_')[1]

        def add_date():
            '''–î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ sql-—Ç–∞–±–ª–∏—Ü—É'''
            global comment
            user = call.data.split('_')[0]
            hours = call.data.split('_')[2].split()[2].split("‚Äì")[0].replace(':', ' ')
            time = (datetime.strptime(hours, '%H %M') + dt_mg.timedelta(hours=-1)).time()
            t = datetime.strptime(hours, '%H %M').time()
            f = '17:00:00'
            n_call = 0

            if comment != {}:
                date_arr = comment[user][1]
            else:
                date_arr = ["", ""]

            date_manager = f"{call.data.split('_')[2].split()[0]} {en_sg[ru.index(call.data.split('_')[2].split()[1])]} {datetime.now().year}"
            date1 = datetime.strptime(date_manager, '%d %b %Y')
            date2 = date1 + dt_mg.timedelta(days=-1)

            today = str(date1).split()[0] + ' ' + str(time)[:5]
            #print(today)
            backtomorrow = str(date2).split()[0] + ' '+f[:5]
            #print(today, backtomorrow)
            s = date_sql.sql_manager()
            s.reg(user, today, date_arr, 0)
            return s.reg(user, backtomorrow, date_arr, 1)#[n, [arg[0], arg[2], arg[1]]]

        def pagefolder(page_date, date):
            '''–°–æ–∑–¥–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å'''
            global all_users
            test1 = types.InlineKeyboardMarkup()
            text = []
            if date != '':
                if f"{call.data.split('_')[2]} {all_users[user]['mou_date']}" not in all_users[user]['date']:
                    all_users[user]['date'].append(f"{call.data.split('_')[2]} {all_users[user]['mou_date']}")
                else:
                    all_users[user]['date'].remove(f"{call.data.split('_')[2]} {all_users[user]['mou_date']}")

            for i in range(1,31)[page_date-9:page_date]:
                #print(all_users['date'])
                if f"{i} {all_users[user]['mou_date']}" in all_users[user]['date']:
                    text.append(f'‚úÖ {i}')
                else:
                    text.append(f' {i}')
                if i % 3 == 0:
                    test1.add(types.InlineKeyboardButton(text=text[0], callback_data=f"{user}_date_"+ str(i-2)),
                    types.InlineKeyboardButton(text=text[1], callback_data=f"{user}_date_"+ str(i-1)),
                    types.InlineKeyboardButton(text=text[2], callback_data=f"{user}_date_"+ str(i)))
                    text = []
            test1.add(types.InlineKeyboardButton(text="<<", callback_data=f"{user}_back"),
            types.InlineKeyboardButton(text=">>", callback_data=f"{user}_next"))
            if all_users[user]['date'] != []:
                test1.add(types.InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å", callback_data=f"{user}_reset_date"))
            test1.add(types.InlineKeyboardButton(text="üî¥–ù–∞–∑–∞–¥", callback_data=f"{user}_settings_0"))
            bot.edit_message_text("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É", reply_markup = test1, chat_id=call.message.chat.id, message_id=call.message.message_id)

        def select_tape_event(tabe, user, chat, message):
            '''–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'''
            global all_users
            if all_users[user]['tp'] != tabe:
                all_users[user]['tp'] = tabe
                events_names = {1:"–ü—Ä–æ—Ñ –∫–ª–∞—Å—Å–∞–º", 2:"–û–ª–∏–º–ø–∏–∞–¥—ã", 3:"–î–Ω–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π", 4:"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"}
                tp = types.InlineKeyboardMarkup()
                for event in events_names:
                    if event == all_users[user]['tp']:
                        tp.add(types.InlineKeyboardButton(text=f"‚úÖ{events_names[event]}", callback_data=f"{user}_tp{event}"))
                    else:
                        tp.add(types.InlineKeyboardButton(text=f"‚ñ´{events_names[event]}", callback_data=f"{user}_tp{event}"))
                tp.add(types.InlineKeyboardButton(text="üî¥–ù–∞–∑–∞–¥", callback_data=f"{user}_settings_0"))
                all_users[user]['f'] = 0
                all_users[user]['arr'] = []
                all_users[user]['page'] = -1
                bot.edit_message_text("–§–æ—Ä–º–∞—Ç—ã: ", reply_markup = tp, chat_id=chat, message_id=message)
            else:
                pass

        def text_messages1(message, user):
            '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ id —é–∑–µ—Ä–∞'''
            global all_users
            if user not in all_users:
                add_new_user(user)
            def send_mess(arg, user):
                '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º'''
                global en, ru, comment, all_users
                url = types.InlineKeyboardMarkup()
                hours = ''
                #print(arg[1])
                if len(arg[1].split(" ")) > 2:
                    hours = arg[1].split(" ")[2]
                #print(arg[3])
                button1 = types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", url=str(arg[2]))#url=str(arg[2]), callback_data=f'{message.from_user.id}_newevent')
                if len(arg[3].split()) > 1 and arg[3].split()[0] != "--":
                    tape = arg[3].split()[1]
                    spots = arg[3].split()[0]
                else:
                    tape = '-'
                    spots = '-'
                date_call = arg[0]+arg[1]
                if arg[5] != "":
                    if arg[5][0] == "'":
                        arg[5]= arg[5][1:len(arg[5])-1]
                    #print(arg[5])
                    photo = urlopen(arg[5])
                    #print(photo)
                else:
                    photo = 'empty'
                n = 0
                comment[user] = [n, [arg[0], arg[2], arg[1]]]
                if arg[1].split()[0].isdigit() and (arg[1].split()[1] in ru):
                    button2 = types.InlineKeyboardButton("–£–≤–µ–¥–æ–º–∏—Ç—å", callback_data = f"{user}_settime_{arg[1]}")
                    url.add(button1, button2)
                else:
                    tape = '-'
                    spots = '-'
                    arg[1] = '\n\n'.join(arg[1].split(", "))
                    url.add(button1)
                if tape == '-' and spots == '-':
                    mes = '{page}) *{head}*\n\n‚ñ´*–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç:*\n{deskrp}\n\n‚ñ´*–î–∞—Ç–∞:*\n{dt}'.format(page=all_users[user]['page']+1, head=arg[0], deskrp=arg[4], dt=arg[1])
                else:
                    mes = '{page}) *{head}*\n\n‚ñ´*–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç:*\n{deskrp}\n\n‚ñ´*–î–∞—Ç–∞:*\n{dt}\n\n‚ñ´*–§–æ—Ä–º–∞—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:*\n{tape}\n\n‚ñ´*–ö–æ–ª-–≤–æ –º–µ—Å—Ç:*\n{spots}'.format(page=all_users[user]['page']+1, head=arg[0], deskrp=arg[4], dt=arg[1], tape = tape, spots = spots)
                return mes, url, photo

            s = {1:'prof', 2:'olimpiads', 3:"doors", 4:'event'}
            if all_users[user]['tp'] in s:
                d = mydate_sql0.sql_manager(s[all_users[user]['tp']])
                all_users[user]['fun'] = d.cheak_date(all_users[user]['date'], all_users[user]['page'], all_users[user]['less'])
            def edi_mes(user, mes, url, photo):
                global all_users, comment
                bn1 = '-'
                bn2 = '-'
                #print(url)
                if all_users[user]['fun'][1] == 1 and all_users[user]['page'] > 0:
                    bn1 = types.InlineKeyboardButton(text="<<", callback_data=f"{user}_backtsarch")
                    bn2 = types.InlineKeyboardButton(text=">>", callback_data=f"{user}_startsarch")

                elif all_users[user]['fun'][1] == 0 and all_users[user]['page'] > 0:
                    bn1 = types.InlineKeyboardButton(text="<<", callback_data=f"{user}_backtsarch")

                elif all_users[user]['fun'][1] == 1 and all_users[user]['page'] == 0:
                    bn1 = types.InlineKeyboardButton(text=">>", callback_data=f"{user}_startsarch")
                    #comment[str(user)].append(url)
                elif all_users[user]['fun'][1] == 2:
                    pass
                comment[str(user)].append([bn1, bn2])
                #print(comment[str(user)])
                if bn2 != '-' and bn1 != '-':
                    url.add(bn1, bn2)
                elif bn2 == '-' and bn1 != '-':
                    url.add(bn1)
                #url.add(types.InlineKeyboardButton(text="üîß–ù–∞—Å—Ç–æ—Ä–æ–π–∫–∏", callback_data=f"{user}_settings_0"))
                #print(url)
                if photo != "emoty":
                    bot.delete_message(message.chat.id, message.message_id)
                    #all_users[user]['xz'] +=1
                    url.add(types.InlineKeyboardButton(text="üîß–ù–∞—Å—Ç–æ—Ä–æ–π–∫–∏", callback_data=f"{user}_settings_0"))
                    mess = bot.send_photo(message.chat.id, photo, caption = mes, reply_markup = url, parse_mode= "Markdown")
                    all_users[user]['last_photo'] = 1
                else:
                    bot.delete_message(message.chat.id, message.message_id)
                    #all_users[user]['xz'] +=1
                    url.add(types.InlineKeyboardButton(text="üîß–ù–∞—Å—Ç–æ—Ä–æ–π–∫–∏", callback_data=f"{user}_settings_0"))
                    mess = bot.send_message(message.chat.id, text = mes, reply_markup = url, parse_mode= "Markdown")
                    all_users[user]['last_photo'] = 0

                #bot.edit_message_text(mes, reply_markup = url, parse_mode= "Markdown", chat_id=message.chat.id, message_id=message.message_id)
            f = 0
            if all_users[user]['fun'][0] != "empty":
                #print(all_users[user]['fun'][0])
                #print(all_users[user]['fun'][0][5])
                all = send_mess(all_users[user]['fun'][0], user)
                mes = all[0]
                url = all[1]
                photo = all[2]
                edi_mes(user, mes, url, photo)
            else:
                end = types.InlineKeyboardMarkup()
                end.add(types.InlineKeyboardButton(text="üîß–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f"{user}_settings_0"))
                bot.edit_message_text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–º–µ–Ω—è–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞.", reply_markup = end, parse_mode= "Markdown", chat_id=message.chat.id, message_id=message.message_id)


                '''if photo != "emoty":
                    if all_users[user]['last_photo'] == 0:
                        print(11)
                        #bot.delete_message(message.chat.id, message.message_id)
                        bot.send_photo(message.chat.id, photo, caption = mes, reply_markup = url, parse_mode= "Markdown")
                        all_users[user]['last_photo'] = 1
                    else:
                        bot.edit_message_media(media=types.InputMedia(type='photo', media=photo, caption = ''),reply_markup = url, chat_id=message.chat.id, message_id=message.message_id)
                        bot.edit_message_caption(caption = mes,parse_mode="Markdown", chat_id=message.chat.id, message_id=message.message_id)
                    #all_users[user]['last_photo'] = 1
                else:
                    if all_users[user]['last_photo'] == 0:
                        bot.edit_message_text(mes, reply_markup = url, parse_mode= "Markdown", chat_id=message.chat.id, message_id=message.message_id)
                        #all_users[user]['last_photo'] = 0
                    else:
                        bot.delete_message(call.message.chat.id, call.message.message_id)
                        bot.send_message(message.chat.id, mes, reply_markup = url, parse_mode= "Markdown")
                        all_users[user]['last_photo'] = 0'''

                            #bot.send_message(message.from_user.id, "–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ", reply_markup=reg)
            #bot.send_message(call.message.chat.id, "–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=markup1)
        def univ(adder):
            '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ —Å–ø–∏—Å–∫–æ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤'''
            all_users[user]['f'] = 0
            all_users[user]['page'] = -1
            if adder not in all_users[user]['less'] and adder != '':
                all_users[user]['less'].append(adder)
            elif adder in all_users[user]['less']and adder != '':
                all_users[user]['less'].remove(adder)
            un = types.InlineKeyboardMarkup()
            for key in list(univer_prof.keys())[all_users[user]['page_for_less']-5:all_users[user]['page_for_less']]:
                if key in all_users[user]['less']:
                    un.add(types.InlineKeyboardButton(text= f'‚úÖ {key}', callback_data=f'{user}_univ_{key}'))
                else:
                    un.add(types.InlineKeyboardButton(text=f'{key}', callback_data=f'{user}_univ_{key}'))
            un.add(types.InlineKeyboardButton(text="<<", callback_data=f"{user}_backforless"),
            types.InlineKeyboardButton(text=">>", callback_data=f"{user}_nextforless"))
            if all_users[user]['less'] != []:
                un.add(types.InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å", callback_data=f"{user}_reset_un"))
            un.add(types.InlineKeyboardButton(text="üî¥–ù–∞–∑–∞–¥", callback_data=f"{user}_settings_0"))
            bot.edit_message_text("–°–ø–∏—Å–æ–∫ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤: ", reply_markup = un, chat_id=call.message.chat.id, message_id=call.message.message_id)

        '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ data.call'''
        if req == "datestop": #–£–¥–∞–ª—è–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            url = types.InlineKeyboardMarkup()
            bn1 = comment[str(user)][2][0]
            bn2 = comment[str(user)][2][1]
            reg = types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", url=str(comment[str(user)][1][1]))
            yv = types.InlineKeyboardButton("–£–≤–µ–¥–æ–º–∏—Ç—å", callback_data = f'{user}_settime_{comment[str(user)][1][2]}_{0}_{user}')
            url.add(reg, yv)
            if bn1!= '-' and bn2!='-':
                url.add(bn1, bn2)
            elif bn1!= '-' and bn2=='-':
                url.add(bn1)
            #print(url)
            url.add(types.InlineKeyboardButton(text="üîß–ù–∞—Å—Ç–æ—Ä–æ–π–∫–∏", callback_data=f"{user}_settings_0"))
            bot.edit_message_reply_markup(reply_markup=url,chat_id=call.message.chat.id, message_id=call.message.message_id)
            #bot.delete_message(call.message.chat.id, call.message.message_id)
            date_sql.sql_manager().delete(call.data.split('_')[2])
            #date_sql.sql_manager().delete(call.data.split('_')[0], call.data.split('_')[2])
            cheak()
        if req == "datestop=dell":
            bot.delete_message(call.message.chat.id, call.message.message_id)
            date_sql.sql_manager().delete(call.data.split('_')[2])
            cheak()

        if req == "settime":#–î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É
            url = types.InlineKeyboardMarkup()
            #print(comment[str(user)][2])
            bn1 = comment[str(user)][2][0]
            bn2 = comment[str(user)][2][1]
            id = add_date()
            reg = types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", url=str(comment[str(user)][1][1]))
            yv = types.InlineKeyboardButton("üîî–£–≤–µ–¥–æ–º–∏—Ç—å", callback_data = f'{user}_datestop_{id}')
            url.add(reg, yv)
            if bn1!= '-' and bn2!='-':
                url.add(bn1, bn2)
            elif bn1!= '-' and bn2=='-':
                url.add(bn1)
            url.add(types.InlineKeyboardButton(text="üîß–ù–∞—Å—Ç–æ—Ä–æ–π–∫–∏", callback_data=f"{user}_settings_0"))
            bot.edit_message_reply_markup(reply_markup = url,chat_id=call.message.chat.id, message_id=call.message.message_id)
            cheak()

        if req in ["tp1", "tp2","tp3","tp4"]:#–î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É
            select_tape_event(int(req[2]), user, call.message.chat.id, call.message.message_id)

        if req == "reset":#–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            if call.data.split('_')[2] == "un" and all_users[user]['less'] != []:
                all_users[user]['less'] = []
                univ('')
            elif call.data.split('_')[2] == "date"and all_users[user]['date'] != []:
                all_users[user]['date'] = []
                pagefolder(all_users[user]['page_date'], '')
        if req == "univ":#–í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ä–∞–Ω–∏—Ü—É —Å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞–º–∏
            adder = call.data.split('_')[2]
            univ(adder)
        if req == "newevent":
            #print(1111)
            cl = stats_data.sql_manager()
            cl.add_stats(str(user), "count1")

        if req == "settings":#–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ä–∞–Ω–∏—Ü—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω–¥–µ–∫—Å–∞(0 - –ú–µ–Ω—é, 1 - –í—ã–±–æ—Ä —Ç–∏–ø–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, 2 - –°–ø–∏—Å–æ–∫ —Å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞–º–∏)
            if call.data.split('_')[2] == '0':
                st = types.InlineKeyboardMarkup()
                st.add(types.InlineKeyboardButton(text="üìã–§–æ—Ä–º–∞—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data=f"{user}_settings_1"))
                st.add(types.InlineKeyboardButton(text="üìÜ–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è", callback_data=f"{user}_settings_2"))
                st.add(types.InlineKeyboardButton(text="üéì–í—ã–±—Ä–æ—Ä –í–£–ó–∞", callback_data=f"{user}_settings_3"))
                if all_users[user]['tp'] != 0:
                    st.add(types.InlineKeyboardButton(text="‚úÖ–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data=f"{user}_startsarch"))
                    #all_users[user]['xz']
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.send_message(call.message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏: ", reply_markup = st)
                '''if all_users[user]['last_photo'] == 0:
                    bot.edit_message_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏: ", reply_markup = st, chat_id=call.message.chat.id, message_id=call.message.message_id)
                else:
                    bot.edit_message_caption("–ù–∞—Å—Ç—Ä–æ–π–∫–∏: ", reply_markup = st, chat_id=call.message.chat.id, message_id=call.message.message_id)'''

            elif call.data.split('_')[2] == '1':
                all_users[user]['page'] = -1
                events_names = {1:"–ü—Ä–æ—Ñ –∫–ª–∞—Å—Å–∞–º", 2:"–û–ª–∏–º–ø–∏–∞–¥—ã", 3:"–î–Ω–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π", 4:"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"}
                tp = types.InlineKeyboardMarkup()
                for event in events_names:
                    if event == all_users[user]['tp']:
                        tp.add(types.InlineKeyboardButton(text=f"‚úÖ{events_names[event]}", callback_data=f"{user}_tp{event}"))
                    else:
                        tp.add(types.InlineKeyboardButton(text=f"‚ñ´{events_names[event]}", callback_data=f"{user}_tp{event}"))
                tp.add(types.InlineKeyboardButton(text="üî¥–ù–∞–∑–∞–¥", callback_data=f"{user}_settings_0"))
                #all_users[user]['xz']
                mess = bot.edit_message_text("–§–æ—Ä–º–∞—Ç—ã: ", reply_markup = tp, chat_id=call.message.chat.id, message_id=call.message.message_id)
                all_users[user]['xz'] = mess.message_id

            elif call.data.split('_')[2] == '2':
                all_users[user]['page'] = -1
                mounth = types.InlineKeyboardMarkup()
                for i in range(len(ru))[0::3]:
                    mounth.add(types.InlineKeyboardButton(text=f'{ru[i]}', callback_data=f'{user}_mou_{ru[i]}'),
                    types.InlineKeyboardButton(text=f'{ru[i+1]}', callback_data=f'{user}_mou_{ru[i+1]}'),
                    types.InlineKeyboardButton(text=f'{ru[i+2]}', callback_data=f'{user}_mou_{ru[i+2]}'))
                mounth.add(types.InlineKeyboardButton(text="üî¥–ù–∞–∑–∞–¥", callback_data=f"{user}_settings_0"))
                bot.edit_message_text("–ö–∞–ª–µ–Ω–¥–∞—Ä—å", reply_markup = mounth, chat_id=call.message.chat.id, message_id=call.message.message_id)
            else:
                adder = ''
                univ(adder)
        elif req == "dellmess":
            bot.delete_message(call.message.chat.id, call.message.message_id)

        elif req == "mou": # –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –º–µ—Å—è—Ü–∞–º–∏
            all_users[user]['page'] = -1
            all_users[user]['mou_date'] = call.data.split('_')[2]
            pagefolder(all_users[user]['page_date'], '')

        elif req == "startsarch":# –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º
            all_users[user]['page']+=1
            text_messages1(call.message, call.data.split('_')[0])

        elif req == "stay":
            text_messages1(call.message, call.data.split('_')[0])

        elif req == "backtsarch":# –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ø—Ä–æ—à–ª—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º
            all_users[user]['page']-=1
            text_messages1(call.message, call.data.split('_')[0])

        elif req == "back":# –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ø—Ä–æ—à–ª—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤—ã–±–æ—Ä–∞–º –¥–∞—Ç—ã
            if all_users[user]['page_date'] >9:
                all_users[user]['page_date']-=9
                pagefolder(all_users[user]['page_date'], '')

        elif req == "next":# –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤—ã–±–æ—Ä–∞–º –¥–∞—Ç—ã
            if all_users[user]['page_date'] <31:
                all_users[user]['page_date']+=9
                pagefolder(all_users[user]['page_date'], '')

        elif req == "backforless":# –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ø—Ä–æ—à–ª—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤—ã–±–æ—Ä–∞–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–∞—Ç–∞
            if all_users[user]['page_for_less'] >5:
                all_users[user]['page_for_less']-=5
                univ('')

        elif req == "nextforless":# –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤—ã–±–æ—Ä–∞–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–∞—Ç–∞
            if all_users[user]['page_for_less'] <16:
                all_users[user]['page_for_less']+=5
                univ('')

        elif req == "date": # –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
            pagefolder(all_users[user]['page_date'], call.data.split('_')[2])
            all_users[user]['page'] = -1
            all_users[user]['fun'] = ["", ""]
            all_users[user]['arr'] = []
            all_users[user]['f'] = 0
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            logging.error(e)
            time.sleep(5)
if __name__ != '__main__':
    tbot()
